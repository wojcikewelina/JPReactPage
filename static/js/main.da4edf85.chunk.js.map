{"version":3,"sources":["components/navigationBar.js","view/homePage.js","view/termoPage.js","view/ozePage.js","view/ponePage.js","App.js","serviceWorker.js","index.js"],"names":["NavigationBar","to","className","Component","HomePage","TermoPage","OzePage","PonePage","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4RAiCeA,G,6KA3BX,OACE,gCACE,6BACE,kBAAC,IAAD,CAAMC,GAAG,KACP,4BAAQC,UAAU,cAAlB,SAEF,kBAAC,IAAD,CAAMD,GAAG,sBACP,4BAAQC,UAAU,cAAlB,8BAIF,kBAAC,IAAD,CAAMD,GAAG,QACP,4BAAQC,UAAU,cAAlB,QAIF,kBAAC,IAAD,CAAMD,GAAG,SACP,4BAAQC,UAAU,cAAlB,yB,GAnBgBC,cCGbC,E,uKAHX,OAAO,gJ,GAFYD,aCKRE,E,uKAHX,OAAO,iG,GAFaF,aCOTG,E,uKAJX,OAAO,4G,GAHWH,aCOPI,E,uKALX,OAAQ,6BACR,qG,GAHmBJ,aC2BRK,E,uKAhBX,OACE,6BACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWP,IACjC,kBAAC,IAAD,CAAOM,KAAK,qBAAqBC,UAAWN,IAC5C,kBAAC,IAAD,CAAOK,KAAK,OAAOC,UAAWL,IAC9B,kBAAC,IAAD,CAAOI,KAAK,QAAQC,UAAWJ,W,GAVzBJ,aCCES,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.da4edf85.chunk.js","sourcesContent":["import React, {Component} from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n\r\nclass NavigationBar extends Component {\r\n  render() {\r\n    return (\r\n      <header>\r\n        <nav>\r\n          <Link to=\"/\">\r\n            <button className=\"nav-button\">Home</button>\r\n          </Link>\r\n          <Link to=\"/termomodernizacja\">\r\n            <button className=\"nav-button\">\r\n              Program Termomodernizacji\r\n            </button>\r\n          </Link>\r\n          <Link to=\"/oze\">\r\n            <button className=\"nav-button\">\r\n              OZE\r\n            </button>\r\n          </Link>\r\n          <Link to=\"/pone\">\r\n            <button className=\"nav-button\">\r\n              Małe PONE\r\n            </button>\r\n          </Link>\r\n        </nav>\r\n      </header>\r\n    )\r\n  }\r\n}\r\n\r\nexport default NavigationBar;\r\n","import React, {Component} from 'react';\r\n\r\nclass HomePage extends Component{\r\n  render(){\r\n    return <p> Tu powstanie strona HOME aplikacji - ułatwiającej mieszkańcom obliczenie dotacji w 2020 roku </p> \r\n  }\r\n}\r\nexport default HomePage;","import React, {Component} from 'react';\r\n\r\nclass TermoPage extends Component{\r\n  render(){\r\n    return <p> Tu powstanie strona opisująca program termomodernizacji </p> \r\n  }\r\n}\r\nexport default TermoPage;","import React, {Component} from 'react';\r\n\r\nclass OzePage extends Component{\r\n\r\n  render(){\r\n    return <h1>Tu powistana informacje dotyczące dotacji w ramach uchwały OZE</h1>\r\n  }\r\n}\r\n\r\nexport default OzePage;","import React, {Component} from 'react';\r\n\r\nclass PonePage extends Component{\r\n  render(){\r\n    return (<div>\r\n    <p>Tu powstanie strona opisująca zasady programu małe pone</p></div>)\r\n  }\r\n}\r\n\r\nexport default PonePage;","import React, { Component } from 'react';\n\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport './App.css';\n\nimport NavigationBar from './components/navigationBar';\nimport HomePage from './view/homePage';\nimport TermoPage from './view/termoPage';\nimport OzePage from './view/ozePage';\nimport PonePage from './view/ponePage';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <BrowserRouter>\n          <NavigationBar />\n          <Switch>\n            <Route exact path=\"/\" component={HomePage} />\n            <Route path=\"/termomodernizacja\" component={TermoPage} />\n            <Route path=\"/oze\" component={OzePage} />\n            <Route path=\"/pone\" component={PonePage} />\n          </Switch>\n        </BrowserRouter>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}